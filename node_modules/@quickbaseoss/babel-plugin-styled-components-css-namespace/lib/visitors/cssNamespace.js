'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _detectors = require('babel-plugin-styled-components/lib/utils/detectors');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var getCssNamespace = function getCssNamespace(state) {
  var cssNamespace = state.opts.cssNamespace;

  if (!cssNamespace) {
    return '&&';
  }

  if (Array.isArray(cssNamespace)) {
    return `.${cssNamespace.join(' .')} &`;
  }

  return `.${cssNamespace} &`;
};

exports.default = function (path, state) {
  var cssNamespace = getCssNamespace(state);
  if ((0, _detectors.isStyled)(path.node.tag, state) && path.node.quasi.quasis[0].value.cooked && !path.node.quasi.quasis[0].value.cooked.startsWith(`\n${cssNamespace} {`) && (path.node.tag.property ? path.node.tag.property.name !== 'keyframes' : true)) {
    var _path$node = path.node,
        callee = _path$node.tag,
        _path$node$quasi = _path$node.quasi,
        quasis = _path$node$quasi.quasis,
        expressions = _path$node$quasi.expressions;


    var values = void 0;
    if (quasis.length === 1) {
      values = [t.templateElement({
        cooked: `\n${cssNamespace} {${quasis[0].value.cooked}}\n`,
        raw: `\n${cssNamespace} {${quasis[0].value.raw}}\n`
      }, quasis[0].tail)];
    } else {
      var first = t.templateElement({
        cooked: `\n${cssNamespace} {${quasis[0].value.cooked}`,
        raw: `\n${cssNamespace} {${quasis[0].value.raw}`
      }, quasis[0].tail);
      var last = t.templateElement({
        cooked: `${quasis[quasis.length - 1].value.cooked}}\n`,
        raw: `${quasis[quasis.length - 1].value.raw}}\n`
      }, quasis[quasis.length - 1].tail);
      values = [first].concat(_toConsumableArray(quasis.slice(1, quasis.length - 1)), [last]);
    }

    path.replaceWith(t.taggedTemplateExpression(callee, t.templateLiteral(values, expressions)));
  }
};